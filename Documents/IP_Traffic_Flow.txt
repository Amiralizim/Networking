Flow:
Flow.ID: a flow identifier following the next format: SourceIP-DestinationIP-SourcePort-DestinationPort-TransportProtocol
Flow.Duration: The total duration of the flow
Flow.Packets.s : The number of packets per second in the flow.
Flow.IAT.Mean: The mean value of the inter-arrival time of the flow (in both directions).
Flow.IAT.Std: The standard deviation of the inter-arrival time of the flow (in both directions).
Flow.IAT.Max: The maximum value of the inter-arrival time of the flow (in both directions).
Flow.IAT.Min: The minimum value of the inter-arrival time of the flow (in both directions).

SubFlow:
Subflow.Fwd.Packets: The average number of packets in a subflow in the forward direction. The core idea of multipath TCP is to define a way to build a connection between two hosts and not between two interfaces (as standard TCP does). In standard TCP, the connection should be established between two IP addresses. Each TCP connection is identified by a four-tuple (source and destination addresses and ports). Given this restriction, an application can only create one TCP connection through a single link. Multipath TCP allows the connection to use several paths simultaneously. For this, Multipath TCP creates one TCP connection, called subflow, over each path that needs to be used. The detailed protocol specification is provided in RFC 6824
Subflow.Fwd.Bytes: The average number of bytes in a subflow in the forward direction.
Subflow.Bwd.Packets: The average number of packets in a subflow in the backward direction.
Subflow.Bwd.Bytes: The average number of bytes in a subflow in the backward direction.

Fwd: 
Fwd.Packet.Length.Max: The maximum value in bytes of the packets length in the forward direction.
Fwd.Packet.Length.Min: The minimum value in bytes of the packets length in the forward direction.
Fwd.Packet.Length.Mean: The mean value in bytes of the packets length in the forward direction.
Fwd.Packet.Length.Std: The standard deviation in bytes of the packets length in the forward direction.
Fwd.IAT.Total: The total Inter-arrival time in the forward direction.
Fwd.IAT.Mean: The mean inter-arrival time in the forward direction.
Fwd.IAT.Std: The standard inter-arrival time in the forward direction.
Fwd.IAT.Max: The maximum value of the inter-arrival time in the forward direction.
Fwd.IAT.Min: The minimum value of the inter-arrival time in the forward direction.
Fwd.PSH.Flags: The number of times the packets sent in the flow had the pushing flag bit set as 1 in the forward direction. 
               The Pushing flag allows to send information immediately without filling all the buffer size from a packet, 
               notifying the receptor to pass the packet to the application at once, it is very useful for real time applications.
Fwd.URG.Flags: The number of times the packets sent in the flow had the URG (Urgent) flag bit set as 1 in the forward direction. 
               The URG flag is used to inform a receiving station that certain data within a segment is urgent and should be prioritized. 
               If the URG flag is set, the receiving station evaluates the urgent pointer, a 16-bit field in the TCP header. 
               This pointer indicates how much of the data in the segment, counting from the first byte, is urgent.
Fwd.Header.Length: The header length of the packets flow in the forward direction.
Fwd.Packets.s: The number of packets per second in the forward direction.
Fwd.Avg.Bytes.Bulk: The average number of bytes bulk rate in the forward direction. Bulk data transfer is a software-based mechanism designed to move large data file using compression, blocking and buffering methods to optimize transfer times.
Fwd.Avg.Packets.Bulk: Average number of packets bulk rate in the forward direction.
Fwd.Avg.Bulk.Rate: Average number of bulk rate in the forward direction.

Bwd: 
Bwd.Packet.Length.Max: The maximum value in bytes of the packets length in the backward direction.
Bwd.Packet.Length.Min: The minimum value in bytes of the packets length in the backward direction.
Bwd.Packet.Length.Mean: The mean value in bytes of the packets length in the backward direction.
Bwd.Packet.Length.Std: The standard deviation in bytes of the packets length in the backward direction.
Bwd.IAT.Total: The total Inter-arrival time in the backward direction.
Bwd.IAT.Mean: The mean inter-arrival time in the backward direction.
Bwd.IAT.Std: The standard inter-arrival time in the backward direction.
Bwd.IAT.Max: The maximum value of the inter-arrival time in the backward direction.
Bwd.IAT.Min: The minimum value of the inter-arrival time in the backward direction.
Bwd.PSH.Flags: The number of times the packets sent in the flow had the pushing flag bit set as 1 in the backward direction. 
               The Pushing flag allows to send information immediately without filling all the buffer size from a packet, 
               notifying the receptor to pass the packet to the application at once, it is very useful for real time applications.
Bwd.URG.Flags: The number of times the packets sent in the flow had the URG (Urgent) flag bit set as 1 in the backward direction. 
               The URG flag is used to inform a receiving station that certain data within a segment is urgent and should be prioritized. 
               If the URG flag is set, the receiving station evaluates the urgent pointer, a 16-bit field in the TCP header. 
               This pointer indicates how much of the data in the segment, counting from the first byte, is urgent.
Bwd.Header.Length: The header length of the packets flow in the backward direction.
Bwd.Packets.s: The number of packets per second in the backward direction.
Bwd.Avg.Bytes.Bulk: The average number of bytes bulk rate in the backward direction. Bulk data transfer is a software-based mechanism designed to move large data file using compression, blocking and buffering methods to optimize transfer times.
Bwd.Avg.Packets.Bulk: Average number of packets bulk rate in the backward direction.
Bwd.Avg.Bulk.Rate: Average number of bulk rate in the backward direction.

FLAG: 
FIN.Flag.Count: The number of times the packets sent in the flow had the FIN flag bit set as 1. In the normal case, each side terminates its end of the connection by sending a special message with the FIN (finish) bit set. This message, sometimes called a FIN, serves as a connection termination request to the other device, while also possibly carrying data like a regular segment. The device receiving the FIN responds with an acknowledgment to the FIN to indicate that it was received. The connection as a whole is not considered terminated until both sides have finished the shutdown procedure by sending a FIN and receiving an ACK.
SYN.Flag.Count: The number of times the packets sent in the flow (in both directions) had the SYN (Synchronize) flag bit set as 1. The SYN (Synchronize) flag is the TCP packet flag that is used to initiate a TCP connection. A packet containing solely a SYN flag is the first part of the "three-way handshake" of TCP connection initiation. It is responded to with a SYN-ACK packet. Packets setting the SYN flag can also be used to perform a SYN flood and a SYN scan.
RST.Flag.Count: ): The number of times the packets sent in the flow (in both directions) had the RST (Reset) flag bit set as 1 - (An RST says reset the connection. It must be sent whenever a segment arrives which apparently is not intended for the current connection - FIN says, "I finished talking to you, but I'll still listen to everything you have to say until you're done" (Wait for an ACK) RST says, "There is no conversation. I am resetting the connection!").
PSH.Flag.Count: The number of times the packets sent in the flow (in both directions) had the PSH (Pushing) flag bit set as 1.
ACK.Flag.Count: The number of times the packets sent in the flow (in both directions) had the ACK (Acknowledged) flag bit set as 1. To establish a connection, TCP uses a three-way handshake. Before a client attempts to connect with a server, the server must first bind to and listen at a port to open it up for connections: this is called a passive open. Once the passive open is established, a client may initiate an active open.
URG.Flag.Count: The number of times the packets sent in the flow (in both directions) had the URG (Urgent) flag bit set as 1.
CWE.Flag.Count: The number of times the packets sent in the flow (in both directions) had the CWR (Congestion Window Reduced) TCP flag set as 1. During the synchronization phase of a connection between client and server, the TCP CWR and ECE (Explicit Congestion Notification - Echo) flags work in conjunction to establish whether the connection is capable of leveraging congestion notification. In order to work, both client and server need to support ECN (Explicit Congestion Notification). To accomplish this, the sender sends a SYN packet with the ECE and CWR flags set, and the receiver sends back the SYN-ACK with only the ECE flag set. Any other configuration indicates a non-ECN setup.
ECE.Flag.Count: The number of times the packets sent in the flow (in both directions) had the ECE (Explicit Congestion Notification Echo) TCP flag set as 1.

Packet: 
Packet.Length.Mean: The mean value of the length of the packets registered in the flow (both forward and backward directions).
Packet.Length.Std: The standard deviation of the length of the packets registered in the flow (both forward and backward directions).
Packet.Length.Variance: The variance of the length of the packets registered in the flow (both forward and backward directions).
Max.Packet.Length: The maximum length of the packets registered in the flow (both forward and backward directions).
Total.Backward.Packets: The total number of packets in the backward direction. ???
Min.Packet.Length: The minimum length of the packets registered in the flow (both forward and backward directions).
